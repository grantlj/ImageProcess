/* soapUpdateStudentStatusSoapProxy.h
   Generated by gSOAP 2.8.23 from doupload.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapUpdateStudentStatusSoapProxy_H
#define soapUpdateStudentStatusSoapProxy_H
#include "soapH.h"

class SOAP_CMAC UpdateStudentStatusSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'UpdateStudentStatusSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in doupload.h (non-static)
	/// Constructor
	UpdateStudentStatusSoapProxy();
	/// Construct from another engine state
	UpdateStudentStatusSoapProxy(const struct soap&);
	/// Constructor with endpoint URL
	UpdateStudentStatusSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	UpdateStudentStatusSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	UpdateStudentStatusSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	UpdateStudentStatusSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor deletes deserialized data and engine context
	virtual	~UpdateStudentStatusSoapProxy();
	/// Initializer used by constructors
	virtual	void UpdateStudentStatusSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'UpdateClassRoomPersonStatus' (returns error code or SOAP_OK)
	virtual	int UpdateClassRoomPersonStatus(_ns1__UpdateClassRoomPersonStatus *ns1__UpdateClassRoomPersonStatus, _ns1__UpdateClassRoomPersonStatusResponse &ns1__UpdateClassRoomPersonStatusResponse) { return this->UpdateClassRoomPersonStatus(NULL, NULL, ns1__UpdateClassRoomPersonStatus, ns1__UpdateClassRoomPersonStatusResponse); }
	virtual	int UpdateClassRoomPersonStatus(const char *endpoint, const char *soap_action, _ns1__UpdateClassRoomPersonStatus *ns1__UpdateClassRoomPersonStatus, _ns1__UpdateClassRoomPersonStatusResponse &ns1__UpdateClassRoomPersonStatusResponse);

	/// Web service operation 'UpdateClassRoomPersonStatus' (returns error code or SOAP_OK)
	virtual	int UpdateClassRoomPersonStatus_(_ns1__UpdateClassRoomPersonStatus *ns1__UpdateClassRoomPersonStatus, _ns1__UpdateClassRoomPersonStatusResponse &ns1__UpdateClassRoomPersonStatusResponse) { return this->UpdateClassRoomPersonStatus_(NULL, NULL, ns1__UpdateClassRoomPersonStatus, ns1__UpdateClassRoomPersonStatusResponse); }
	virtual	int UpdateClassRoomPersonStatus_(const char *endpoint, const char *soap_action, _ns1__UpdateClassRoomPersonStatus *ns1__UpdateClassRoomPersonStatus, _ns1__UpdateClassRoomPersonStatusResponse &ns1__UpdateClassRoomPersonStatusResponse);
};
#endif
